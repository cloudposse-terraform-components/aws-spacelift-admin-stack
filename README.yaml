name: "aws-spacelift-admin-stack"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-spacelift-admin-stack"
# Short description of this project
description: |-
  This component is responsible for creating an administrative [stack](https://docs.spacelift.io/concepts/stack/) and its
  corresponding child stacks in the Spacelift organization.

  The component uses a series of `context_filters` to select atmos component instances to manage as child stacks.
usage: |-
  **Stack Level**: Global

  The following are example snippets of how to use this component. For more on Spacelift admin stack usage, see the
  [Spacelift README](https://docs.cloudposse.com/components/library/aws/spacelift/)

  First define the default configuration for any admin stack:

  ```yaml
  # stacks/catalog/spacelift/admin-stack.yaml
  components:
    terraform:
      admin-stack/default:
        metadata:
          type: abstract
          component: spacelift/admin-stack
        settings:
          spacelift:
            administrative: true
            autodeploy: true
            before_apply:
              - spacelift-configure-paths
            before_init:
              - spacelift-configure-paths
              - spacelift-write-vars
              - spacelift-tf-workspace
            before_plan:
              - spacelift-configure-paths
            drift_detection_enabled: true
            drift_detection_reconcile: true
            drift_detection_schedule:
              - 0 4 * * *
            manage_state: false
            policies: {}
        vars:
          # Organization specific configuration
          branch: main
          repository: infrastructure
          worker_pool_name: "acme-core-ue1-auto-spacelift-worker-pool"
          runner_image: 111111111111.dkr.ecr.us-east-1.amazonaws.com/infrastructure:latest
          spacelift_spaces_stage_name: "root"
          # These values need to be manually updated as external configuration changes
          # This should match the version set in the Dockerfile and be updated when the version changes.
          terraform_version: "1.3.6"
          # Common configuration
          administrative: true # Whether this stack can manage other stacks
          component_root: components/terraform
  ```

  Then define the root-admin stack:

  ```yaml
  # stacks/orgs/acme/spacelift.yaml
  import:
    - mixins/region/global-region
    - orgs/acme/_defaults
    - catalog/terraform/spacelift/admin-stack
    - catalog/terraform/spacelift/spaces

  # These intentionally overwrite the default values
  vars:
    tenant: root
    environment: gbl
    stage: spacelift

  components:
    terraform:
      # This admin stack creates other "admin" stacks
      admin-stack:
        metadata:
          component: spacelift/admin-stack
          inherits:
            - admin-stack/default
        settings:
          spacelift:
            root_administrative: true
            labels:
              - root-admin
              - admin
        vars:
          enabled: true
          root_admin_stack: true # This stack will be created in the root space and will create all the other admin stacks as children.
          context_filters: # context_filters determine which child stacks to manage with this admin stack
            administrative: true # This stack is managing all the other admin stacks
            root_administrative: false # We don't want this stack to also find itself in the config and add itself a second time
          labels:
            - admin
          # attachments only on the root stack
          root_stack_policy_attachments:
            - TRIGGER Global administrator
          # this creates policies for the children (admin) stacks
          child_policy_attachments:
            - TRIGGER Global administrator
  ```

  Finally, define any tenant-specific stacks:

  ```yaml
  # stacks/orgs/acme/core/spacelift.yaml
  import:
    - mixins/region/global-region
    - orgs/acme/core/_defaults
    - catalog/terraform/spacelift/admin-stack

  vars:
    tenant: core
    environment: gbl
    stage: spacelift

  components:
    terraform:
      admin-stack:
        metadata:
          component: spacelift/admin-stack
          inherits:
            - admin-stack/default
        settings:
          spacelift:
            labels: # Additional labels for this stack
              - admin-stack-name:core
        vars:
          enabled: true
          context_filters:
            tenants: ["core"]
          labels: # Additional labels added to all children
            - admin-stack-name:core # will be used to automatically create the `managed-by:stack-name` label
          child_policy_attachments:
            - TRIGGER Dependencies
  ```
references:
  - name: "Spacelift Stack"
    description: ""
    url: "https://docs.spacelift.io/concepts/stack/"
  - name: "Cloud Posse Spacelift Component"
    description: ""
    url: "https://docs.cloudposse.com/components/library/aws/spacelift/"
tags:
  - component/spacelift/admin-stack
  - layer/spacelift
  - provider/aws
  - provider/spacelift
# Categories of this project
categories:
  - component/spacelift/admin-stack
  - layer/spacelift
  - provider/aws
  - provider/spacelift
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-spacelift-admin-stack.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-spacelift-admin-stack/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
